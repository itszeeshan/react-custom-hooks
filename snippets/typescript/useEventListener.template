type EventHandler<T extends Event> = (event: T) => void;

function useEventListener<T extends Event>(
    eventType: string,
    callback: EventHandler<T>,
    element: HTMLElement | Window = window
): void {
    const callbackRef = useRef(callback);

    useEffect(() => {
        callbackRef.current = callback;
    }, [callback]);

    useEffect(() => {
        if (element == null) return;
        const handler = (e: T) => callbackRef.current(e);
        element.addEventListener(eventType, handler as EventListener);

        return () => element.removeEventListener(eventType, handler as EventListener);
    }, [eventType, element]);
}