type UseAsync<T> = {
    loading: boolean;
    error: Error | undefined;
    value: T | undefined;
};

function useAsync<T>(callback: () => Promise<T>, dependencies: any[] = []): UseAsync<T> {
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<Error | undefined>(undefined);
    const [value, setValue] = useState<T | undefined>(undefined);

    const callbackMemoized = useCallback(() => {
        setLoading(true);
        setError(undefined);
        setValue(undefined);
        callback()
            .then(setValue)
            .catch(setError)
            .finally(() => setLoading(false));
    }, dependencies);

    useEffect(() => {
        callbackMemoized();
    }, [callbackMemoized]);

    return { loading, error, value };
}